import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface Todo {
  userId: number,
  id: number,
  title: string,
  completed: boolean
}
interface TodoState {
  error: string | null | unknown
  status: string | null | undefined
  list: Todo[]
}

const initialState: TodoState = {
  error: null,
  status: null,
  list: []
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTodos = createAsyncThunk(
  'todo/getTodos',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=5');
      const data = await response.json();
      return data;

    } catch (err) {
      const typedError = err as Error;
      throw rejectWithValue(typedError?.message)
    }
  }
);

export const addTodos = createAsyncThunk(
  'todo/addTodos',
  async (title: string) => {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      body: JSON.stringify({
        title: title,
        body: 'bar',
        userId: 1,
      }),
      headers: {
        'Content-type': 'application/json; charset=UTF-8',
      },
    })
    const data = await response.json();
    return data;
  }
);

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    deleteTodo: (state, action) => {
      state.list = state.list.filter((item) => item.id !== action.payload)
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTodos.pending, (state, action) => {
        state.error = null
        state.status = 'loading'
      })
      .addCase(getTodos.fulfilled, (state, action) => {
        state.list = [...action.payload]
        state.status = null
      })
      .addCase(addTodos.fulfilled, (state, action) => {
        state.list = [...state.list, action.payload]
      })
      .addCase(getTodos.rejected, (state, action) => {
        state.error = action.payload
        state.status = null
        console.log(current(state))
      });
  },
});

export const { deleteTodo } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodo = (state: RootState) => state;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default todoSlice.reducer;
